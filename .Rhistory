group_by(stratum) %>%
summarize(count = n()) %>%
mutate(prop = count/nrow(arenas)) %>%
mutate(sample_size = round(40 * prop, 0))
arenas_strat_prop = NULL
for(i in 1:nrow(sample_sizes)){
arenas_strat_prop = rbind(arenas_strat_prop, sample_n(arenas %>% filter(stratum == sample_sizes$stratum[[i]]), sample_sizes$sample_size[[i]]))
}
sample_sizes$inclusion_p = sample_sizes$sample_size / sample_sizes$count
arenas_strat_prop = merge(arenas_strat_prop, sample_sizes, by = "stratum")
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count)
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_srs = svymean(~capacity, svy_strat_prop) %>% coef()
se_srs_mean = svymean(~capacity, svy_strat_pop) %>% SE()
svy_strat_prop
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count)
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_srs = svymean(~capacity, svy_strat_prop) %>% coef()
se_srs_mean = svymean(~capacity, svy_strat_prop) %>% SE()
lower = mean_srs - 1.96 * se_srs_mean
upper = mean_srs + 1.96 * se_srs_mean
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \nL: ", round(lower,2), " U: ", round(upper,2)))
svymean(~capacity, svy_strat_prop) %>% SE()
svymean(~capacity, svy_srs) %>% SE()
n = 40
#generate SRS
arena_srs = sample_n(arenas, n)
N = nrow(arenas)
arena_srs$wts = N/n
arena_srs$pop_size = N
svy_srs = svydesign(~1, weights=~wts, fpc =~pop_size, data = arena_srs)
mean_srs = svymean(~capacity, svy_srs) %>% coef()
se_srs_mean = svymean(~capacity, svy_srs) %>% SE()
mean_srs_l = mean_srs - 1.96 * se_srs_mean
mean_srs_u = mean_srs + 1.96 * se_srs_mean
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \nL: ", round(mean_srs_l,2), " U: ", round(mean_srs_u, 2)))
svymean(~capacity, svy_srs) %>% SE()
arena_srs$prop = (arena_srs$capacity < 9314) %>% as.numeric()
svy_srs = svydesign(~1, weights=~wts, fpc =~pop_size, data = arena_srs)
prop_srs = svymean(~prop, svy_srs) %>% coef()
se_srs_prop = svymean(~prop, svy_srs) %>% SE()
prop_srs_l = prop_srs - 1.96 * se_srs_prop
prop_srs_u = prop_srs + 1.96 * se_srs_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [SRS] \n", round(prop_srs * 100, 2), "%\n\n95% Confidence Interval [SRS] \nL: ", round(100 *prop_srs_l,2), "% U: ", round(100*prop_srs_u, 2)), "%")
#is CLT appropriate here?
arenas = arenas %>%
mutate(stratum = ifelse(
founded < 1960,
"Classics", ifelse(
founded < 1980,
"Older", ifelse(
founded < 2000,
"Middle", "New"
)
)
)
)
sample_sizes = arenas %>%
group_by(stratum) %>%
summarize(count = n()) %>%
mutate(prop = count/nrow(arenas)) %>%
mutate(sample_size = round(40 * prop, 0))
arenas_strat_prop = NULL
for(i in 1:nrow(sample_sizes)){
arenas_strat_prop = rbind(arenas_strat_prop, sample_n(arenas %>% filter(stratum == sample_sizes$stratum[[i]]), sample_sizes$sample_size[[i]]))
}
sample_sizes$inclusion_p = sample_sizes$sample_size / sample_sizes$count
arenas_strat_prop = merge(arenas_strat_prop, sample_sizes, by = "stratum")
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count)
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_srs = svymean(~capacity, svy_strat_prop) %>% coef()
se_srs_mean = svymean(~capacity, svy_strat_prop) %>% SE()
lower = mean_srs - 1.96 * se_srs_mean
upper = mean_srs + 1.96 * se_srs_mean
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \nL: ", round(lower,2), " U: ", round(upper,2)))
svymean(~capacity, svy_strat_prop) %>% SE()
View(arenas_strat_prop)
View(arenas)
View(arenas)
View(arena_srs)
arena_srs$wts = N/n
arena_srs$pop_size = N
arena_srs$small = (arena_srs$capacity < 9314) %>% as.numeric()
svy_srs = svydesign(~1, weights=~wts, fpc =~pop_size, data = arena_srs)
mean_srs = svymean(~capacity, svy_srs) %>% coef()
se_srs_mean = svymean(~capacity, svy_srs) %>% SE()
mean_srs_l = mean_srs - 1.96 * se_srs_mean
mean_srs_u = mean_srs + 1.96 * se_srs_mean
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \nL: ", round(mean_srs_l,2), " U: ", round(mean_srs_u, 2)))
prop_srs = svymean(~small, svy_srs) %>% coef()
se_srs_prop = svymean(~small, svy_srs) %>% SE()
prop_srs_l = prop_srs - 1.96 * se_srs_prop
prop_srs_u = prop_srs + 1.96 * se_srs_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [SRS] \n", round(prop_srs * 100, 2), "%\n\n95% Confidence Interval [SRS] \nL: ", round(100 *prop_srs_l,2), "% U: ", round(100*prop_srs_u, 2)), "%")
#is CLT appropriate here?
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = capcity < 9314)
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = capacity < 9314)
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_srs = svymean(~capacity, svy_strat_prop) %>% coef()
se_srs_mean = svymean(~capacity, svy_strat_prop) %>% SE()
lower = mean_srs - 1.96 * se_srs_mean
upper = mean_srs + 1.96 * se_srs_mean
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \nL: ", round(lower,2), " U: ", round(upper,2)))
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = capacity < 9314)
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_strat_pop = svymean(~capacity, svy_strat_prop) %>% coef()
se_strat_pop_mean = svymean(~capacity, svy_strat_prop) %>% SE()
mean_strat_pop_l = mean_strat_pop - 1.96 * se_strat_pop_mean
mean_strat_pop_u = mean_strat_pop + 1.96 * se_strat_pop_mean
cat(paste0("Estimate for Mean [Stratified, Proportional] \n", round(mean_strat_pop,2), "\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(mean_strat_pop_l,2), " U: ", round(mean_strat_pop_u,2)))
svymean(~capacity, svy_strat_prop) %>% SE()
svymean(~small, svy_srs) %>% SE()
svymean(~capacity, svy_srs) %>% SE()
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_srs * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_srs_l,2), "% U: ", round(100*prop_srs_u, 2)), "%")
#is CLT appropriate here?
arenas = arenas %>%
mutate(stratum = ifelse(
founded < 1960,
"Classics", ifelse(
founded < 1980,
"Older", ifelse(
founded < 2000,
"Middle", "New"
)
)
)
)
sample_sizes = arenas %>%
group_by(stratum) %>%
summarize(count = n()) %>%
mutate(prop = count/nrow(arenas)) %>%
mutate(sample_size = round(40 * prop, 0))
arenas_strat_prop = NULL
for(i in 1:nrow(sample_sizes)){
arenas_strat_prop = rbind(arenas_strat_prop, sample_n(arenas %>% filter(stratum == sample_sizes$stratum[[i]]), sample_sizes$sample_size[[i]]))
}
sample_sizes$inclusion_p = sample_sizes$sample_size / sample_sizes$count
arenas_strat_prop = merge(arenas_strat_prop, sample_sizes, by = "stratum")
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = capacity < 9314)
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_strat_pop = svymean(~capacity, svy_strat_prop) %>% coef()
se_strat_pop_mean = svymean(~capacity, svy_strat_prop) %>% SE()
mean_strat_pop_l = mean_strat_pop - 1.96 * se_strat_pop_mean
mean_strat_pop_u = mean_strat_pop + 1.96 * se_strat_pop_mean
cat(paste0("Estimate for Mean [Stratified, Proportional] \n", round(mean_strat_pop,2), "\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(mean_strat_pop_l,2), " U: ", round(mean_strat_pop_u,2)))
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_srs * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_srs_l,2), "% U: ", round(100*prop_srs_u, 2)), "%")
#is CLT appropriate here?
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_strata_prop_l,2), "% U: ", round(100*prop_strata_prop_u, 2)), "%")
#is CLT appropriate here?
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_strata_prop_l,2), "% U: ", round(100*prop_strata_prop_u, 2)), "%")
#is CLT appropriate here?
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = (capacity < 9314) %>% as.numeric())
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_strat_pop = svymean(~capacity, svy_strat_prop) %>% coef()
se_strat_pop_mean = svymean(~capacity, svy_strat_prop) %>% SE()
mean_strat_pop_l = mean_strat_pop - 1.96 * se_strat_pop_mean
mean_strat_pop_u = mean_strat_pop + 1.96 * se_strat_pop_mean
cat(paste0("Estimate for Mean [Stratified, Proportional] \n", round(mean_strat_pop,2), "\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(mean_strat_pop_l,2), " U: ", round(mean_strat_pop_u,2)))
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_strata_prop_l,2), "% U: ", round(100*prop_strata_prop_u, 2)), "%")
#is CLT appropriate here?
confint(svymean(~small, svy_strat_prop))
confint(svymean(~small, svy_strat_prop), level = .95)
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_strata_prop_l,2), "% U: ", round(100*prop_strata_prop_u, 2)), "%")
#is CLT appropriate here?
confint(svymean(~small, svy_strat_prop), level = .95)
confint(svymean(~capacity, svy_srs))
arena_srs$wts = N/n
arena_srs$pop_size = N
arena_srs$small = (arena_srs$capacity < 9314) %>% as.numeric()
svy_srs = svydesign(~1, weights=~wts, fpc =~pop_size, data = arena_srs)
mean_srs = svymean(~capacity, svy_srs) %>% coef()
se_srs_mean = svymean(~capacity, svy_srs) %>% SE()
mean_srs_l = mean_srs - 1.96 * se_srs_mean
mean_srs_u = mean_srs + 1.96 * se_srs_mean
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \nL: ", round(mean_srs_l,2), " U: ", round(mean_srs_u, 2)))
confint(svymean(~capacity, svy_srs))
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_strata_prop_l,2), "% U: ", round(100*prop_strata_prop_u, 2)), "%")
#is CLT appropriate here?
confint(svymean(~small, svy_strat_prop), level = .95)
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
se_strata_prop_prop = svymean(~small, svy_strat_prop) %>% SE()
prop_strata_prop_l = prop_srs - 1.96 * se_strata_prop_prop
prop_strata_prop_u = prop_srs + 1.96 * se_strata_prop_prop
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional] \nL: ", round(100 *prop_strata_prop_l,2), "% U: ", round(100*prop_strata_prop_u, 2)), "%")
#is CLT appropriate here?
confint(svymean(~small, svy_strat_prop), level = .95)
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional]"))
#is CLT appropriate here?
confint(svymean(~small, svy_strat_prop), level = .95)
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional]\n"))
#is CLT appropriate here?
confint(svymean(~small, svy_strat_prop), level = .95)
arenas_strat_prop = arenas_strat_prop %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = (capacity < 9314) %>% as.numeric())
svy_strat_prop = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_prop)
mean_strat_pop = svymean(~capacity, svy_strat_prop) %>% coef()
cat(paste0("Estimate for Mean [Stratified, Proportional] \n", round(mean_strat_pop,2), "\n\n95% Confidence Interval [Stratified, Proportional] \n"))
confint(svymean(~capacity, svy_strat_prop))
prop_srs = svymean(~small, svy_srs) %>% coef()
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [SRS] \n", round(prop_srs * 100, 2), "%\n\n95% Confidence Interval [SRS] \n"))
confint(svymean(~small, svy_srs))
confint(svymean(~small, svy_srs)) %>% .*1000 %>% round(2)
confint(svymean(~small, svy_srs)) * 1000 %>% round(2)
confint(svymean(~small, svy_srs)) * 100 %>% round(2)
(confint(svymean(~small, svy_srs)) * 100) %>% round(2)
prop_srs = svymean(~small, svy_srs) %>% coef()
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [SRS] \n", round(prop_srs * 100, 2), "%\n\n95% Confidence Interval [SRS] \n"))
(confint(svymean(~small, svy_srs)) * 100) %>% round(2)
confint(svymean(~capacity, svy_srs))
confint(svymean(~capacity, svy_srs)) %>% round(2)
arena_srs$wts = N/n
arena_srs$pop_size = N
arena_srs$small = (arena_srs$capacity < 9314) %>% as.numeric()
svy_srs = svydesign(~1, weights=~wts, fpc =~pop_size, data = arena_srs)
mean_srs = svymean(~capacity, svy_srs) %>% coef()
cat(paste0("Estimate for Mean [SRS] \n", round(mean_srs,2), "\n\n95% Confidence Interval [SRS] \n"))
confint(svymean(~capacity, svy_srs)) %>% round(2)
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional]\n"))
#is CLT appropriate here?
(100 * confint(svymean(~small, svy_strat_prop), level = .95)) %>% round(2)
prop_strata_prop = svymean(~small, svy_strat_prop) %>% coef()
cat(paste0("Estimate for Proporton of Stadiums Smaller than Cameron [Stratified, Proportional] \n", round(prop_strata_prop * 100, 2), "%\n\n95% Confidence Interval [Stratified, Proportional]\n"))
#is CLT appropriate here?
(100 * confint(svymean(~small, svy_strat_prop))) %>% round(2)
View(arenas)
sample_sizes_optimal = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s_2 = var(capacity))
View(sample_sizes_optimal)
var()
var
sample_sizes_opt = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s_2 = var(capacity))
arenas_strat_opt = NULL
for(i in 1:nrow(sample_sizes)){
arenas_strat_prop = rbind(arenas_strat_opt,
sample_n(arenas %>%
filter(stratum == sample_sizes_opt$stratum[[i]]),
sample_sizes_opt$sample_size[[i]]))
}
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s_2) / N * 40
sample_sizes_opt = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s_2 = sd(capacity))
sample_sizes_opt = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s = sd(capacity))
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s) / N * 40
View(sample_sizes_opt)
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s) / N * 40
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s) * 40
sample_sizes_opt = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s = sd(capacity))
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s) * 40
sample_sizes_opt = sample_sizes_opt %>%
mutate(sample_size = count * s / denom)
sample_sizes_opt$count
sample_sizes_opt$s
sample_sizes_opt = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s = sd(capacity))
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s)
sample_sizes_opt = sample_sizes_opt %>%
mutate(sample_size = 40 * count * s / denom)
sum(sample_sizes_opt$sample_size)
sample_sizes_opt = sample_sizes_opt %>%
mutate(sample_size = round(40 * count * s / denom, 0))
arenas_strat_opt = NULL
for(i in 1:nrow(sample_sizes)){
arenas_strat_prop = rbind(arenas_strat_opt,
sample_n(arenas %>%
filter(stratum == sample_sizes_opt$stratum[[i]]),
sample_sizes_opt$sample_size[[i]]))
}
for(i in 1:nrow(sample_sizes)){
arenas_strat_opt = rbind(arenas_strat_opt,
sample_n(arenas %>%
filter(stratum == sample_sizes_opt$stratum[[i]]),
sample_sizes_opt$sample_size[[i]]))
}
sample_sizes$inclusion_p = sample_sizes$sample_size / sample_sizes$count
sample_sizes_opt$inclusion_p = sample_sizes_opt$sample_size / sample_sizes$count
arenas_strat_opt = merge(arenas_strat_opt, sample_sizes_opt, by = "stratum")
View(arenas_strat_prop)
View(arenas_strat_opt)
arenas_strat_opt = arenas_strat_opt %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = (capacity < 9314) %>% as.numeric())
svymean(~capacity, svy_strat_opt)
svy_strat_opt = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_opt)
svymean(~capacity, svy_strat_opt)
svymean(~capacity, svy_strat_prop)
svymean(~capacity, svy_strat_prop)
svymean(~capacity, svy_srs)
arena_srs$wts = N/n
arena_srs$pop_size = N
arena_srs$small = (arena_srs$capacity < 9314) %>% as.numeric()
svy_srs = svydesign(~1, weights=~wts, fpc =~pop_size, data = arena_srs)
cat(paste0("Estimate and CI for Mean [SRS] \n", round(mean_srs,2)))
svymean(~capacity, svy_srs)
confint(svymean(~capacity, svy_srs)) %>% round(2)
cat("Estimate and CI for Proporton of Stadiums Smaller than Cameron [SRS]")
svymean(~small, svy_srs)
(confint(svymean(~small, svy_srs)) * 100) %>% round(2)
arenas_strat_opt = arenas_strat_opt %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = (capacity < 9314) %>% as.numeric())
svy_strat_opt = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_opt)
cat("Estimate and CI for Mean [Stratified, Optimal]")
svymean(~capacity, svy_strat_opt)
confint(svymean(~capacity, svy_strat_opt)) %>% round(2)
sample_sizes_opt = arenas %>%
group_by(stratum) %>%
summarize(count = n(), s = sd(capacity))
denom = sum(sample_sizes_opt$count * sample_sizes_opt$s)
sample_sizes_opt = sample_sizes_opt %>%
mutate(sample_size = round(40 * count * s / denom, 0))
arenas_strat_opt = NULL
for(i in 1:nrow(sample_sizes)){
arenas_strat_opt = rbind(arenas_strat_opt,
sample_n(arenas %>%
filter(stratum == sample_sizes_opt$stratum[[i]]),
sample_sizes_opt$sample_size[[i]]))
}
sample_sizes_opt$inclusion_p = sample_sizes_opt$sample_size / sample_sizes$count
arenas_strat_opt = merge(arenas_strat_opt, sample_sizes_opt, by = "stratum")
#check
sum(sample_sizes_opt$sample_size) == 40
sample_sizes_opt %>%
select(strata, sample_size)
sample_sizes_opt %>%
select(stratum, sample_size)
arenas_strat_opt = arenas_strat_opt %>%
mutate(wts = 1/inclusion_p) %>%
mutate(pop_size = count) %>%
mutate(small = (capacity < 9314) %>% as.numeric())
svy_strat_opt = svydesign(~1, strata = ~stratum, weights=~wts, fpc =~pop_size, data = arenas_strat_opt)
svymean(~capacity, svy_strat_opt)
confint(svymean(~capacity, svy_strat_opt)) %>% round(2)
trucks = read.csv("trucks.csv")
View(trucks)
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS)
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS, data = trucks)
svytotal(trucks_svy)
trucks$WTS = 1/trucks$TABTRUCKS
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS, fpcf = ~WTS data = trucks)
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS, fpcf = ~WTS, data = trucks)
svytotal(trucks_svy)
trucks$WTS = 1/trucks$TABTRUCKS
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS, fpcf = ~WTS, data = trucks)
svytotal(trucks_svy)
trucks = read.csv("trucks.csv")
trucks$indicator = 1
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS, data = trucks)
svytotal(trucks_svy, ~indicator)
svytotal(~indicator, trucks_svy)
svytotal(~indicator, truck_svy)
truck_svy = svydesign(~1, strata = ~STRATUM, weights = ~TABTRUCKS, data = trucks)
svytotal(~indicator, truck_svy)
svytotal(~indicator, truck_svy)
svytotal(~MILES_ANNL, truck_svy)
svytotal(~MILES_ANNL, subset(truck_svy, TRUCKTYPE==1)
svytotal(~MILES_ANNL, subset(truck_svy, TRUCKTYPE==1))
pickup_svy = subset(truck_svy, TRUCKTYPE==1)
svytotal(~MILES_ANNL, pickup_svy)
truck_svy1 = subset(truck_svy, TRUCKTYPE==1)
svytotal(~MILES_ANNL, truck_svy1)
truck_svy2 = subset(truck_svy, TRUCKTYPE==2)
svytotal(~MILES_ANNL, truck_svy2)
truck_svy1 = subset(truck_svy, TRUCKTYPE==1)
svytotal(~MILES_ANNL, truck_svy1)
truck_svy3 = subset(truck_svy, TRUCKTYPE==3)
svytotal(~MILES_ANNL, truck_svy3)
truck_svy3 = subset(truck_svy, TRUCKTYPE==3)
svytotal(~MILES_ANNL, truck_svy3)
truck_svy4 = subset(truck_svy, TRUCKTYPE==4)
svytotal(~MILES_ANNL, truck_svy4)
truck_svy5 = subset(truck_svy, TRUCKTYPE==5)
svytotal(~MILES_ANNL, truck_svy5)
svytotal(~MILES_ANNL, truck_svy)
confint(svytotal(~MILES_ANNL, truck_svy))
confint(svytotal(~indicator, truck_svy))
truck_svy1 = subset(truck_svy, TRUCKTYPE==1)
svytotal(~MILES_ANNL, truck_svy1)
confint(svytotal(~MILES_ANNL, truck_svy1))
svytotal(~MILES_ANNL, truck_svy2) %>% confint()
confint(svytotal(~MILES_ANNL, truck_svy2))
confint(svytotal(~MILES_ANNL, truck_svy3))
truck_svy3 = subset(truck_svy, TRUCKTYPE==3)
svytotal(~MILES_ANNL, truck_svy3)
confint(svytotal(~MILES_ANNL, truck_svy3))
confint(svytotal(~MILES_ANNL, truck_svy4))
confint(svytotal(~MILES_ANNL, truck_svy5))
truck_svy5 = subset(truck_svy, TRUCKTYPE==5)
svytotal(~MILES_ANNL, truck_svy5)
confint(svytotal(~MILES_ANNL, truck_svy5))
truck_svy4 = subset(truck_svy, TRUCKTYPE==4)
svytotal(~MILES_ANNL, truck_svy4)
confint(svytotal(~MILES_ANNL, truck_svy4))
source('~/.active-rstudio-document', echo=TRUE)
library(dplyr)
library(survey)
library(tidyr)
library(httr)
library(rvest)
library(stringr)
set.seed(12345)
rm(list=ls())
gc()
rm(list=ls())
setwd("~/Documents/1 - Duke/4 - Senior/CS 216/216_final_project")
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
pwd
getwd()
ls()
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
View(mheatlh)
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$"Crude Rate"
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$'Crude Rate'
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
mheatlh = readxl::read_xlsx("Data/merged.xlsx")
mhealth$`Crude Rate`
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mheatlh, formula = log(srate) ~ poverty_2018)
mhealth$srate = mhealth$`Crude Rate`
View(mhealth)
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mhealth, formula = log(srate) ~ poverty_2018)
summary(model)
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mhealth, formula = log(srate) ~ poverty_2018 + unemployment_rate + gdp_per_capita + smha_expenditures + pct_white)
summary(model)
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mhealth, formula = log(srate) ~ poverty_2018 + unemployment_rate + gdp_per_capita + smha_expenditures + pct_white + mhhi_2018)
summary(model)
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mhealth, formula = log(srate) ~ poverty_2018 + unemployment_rate + smha_expenditures + pct_white + mhhi_2018 / 1000)
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mhealth, formula = log(srate) ~ poverty_2018 + unemployment_rate + smha_expenditures + pct_white + mhhi_2018 / 1000)
mhealth = readxl::read_xlsx("Data/merged.xlsx")
mhealth$srate = mhealth$`Crude Rate`
model = lm(data = mhealth, formula = log(srate) ~ poverty_2018 + unemployment_rate + smha_expenditures + pct_white + mhhi_2018)
summary(model)
